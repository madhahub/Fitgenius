
// This is an autogenerated file from Firebase Studio.
'use server';
/**
 * @fileOverview Generates a personalized workout routine based on user input.
 *
 * - generateWorkoutRoutine - A function that generates a workout routine.
 * - GenerateWorkoutRoutineInput - The input type for the generateWorkoutRoutine function.
 * - GenerateWorkoutRoutineOutput - The return type for the generateWorkoutRoutine function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const GenerateWorkoutRoutineInputSchema = z.object({
  fitnessLevel: z
    .enum(['Beginner', 'Intermediate', 'Advanced'])
    .describe('Your current fitness level.'),
  goals: z
    .string()
    .describe(
      'Your fitness goals, e.g., lose weight, build muscle, improve endurance.'
    ),
  availableEquipment: z
    .string()
    .describe(
      'The equipment you have available, e.g., dumbbells, barbell, resistance bands, bodyweight only.'
    ),
  workoutDuration: z
    .number()
    .describe('The desired duration of the workout in minutes.'),
  workoutFrequency: z
    .number()
    .describe('The number of days per week you want to workout.'),
});
export type GenerateWorkoutRoutineInput = z.infer<
  typeof GenerateWorkoutRoutineInputSchema
>;

const ExerciseSchema = z.object({
  name: z.string().describe('The name of the exercise. This should be distinct and suitable for bolding.'),
  details: z.string().describe('Sets, reps, duration, or other relevant details for the exercise. E.g., "3 sets of 10-12 reps", "Hold for 30 seconds".'),
});

const DailyWorkoutSchema = z.object({
  dayTitle: z.string().describe('Title for the workout day, e.g., "Day 1: Chest and Triceps", "Full Body Workout A". This title will be a heading.'),
  exercises: z.array(ExerciseSchema).describe('A list of exercises for this day, in the recommended order.'),
  notes: z.string().optional().describe('Optional general notes or instructions for the day in Markdown format. This could include warm-up or cool-down instructions.')
});

const GenerateWorkoutRoutineOutputSchema = z.object({
  workoutPlan: z.array(DailyWorkoutSchema).describe('The structured workout plan, with each element representing a workout day.'),
  introduction: z.string().optional().describe("A brief introduction or overview of the workout plan in Markdown format."),
  conclusion: z.string().optional().describe("A brief conclusion or final remarks for the workout plan in Markdown format.")
});
export type GenerateWorkoutRoutineOutput = z.infer<
  typeof GenerateWorkoutRoutineOutputSchema
>;
export type DailyWorkout = z.infer<typeof DailyWorkoutSchema>;
export type Exercise = z.infer<typeof ExerciseSchema>;


export async function generateWorkoutRoutine(
  input: GenerateWorkoutRoutineInput
): Promise<GenerateWorkoutRoutineOutput> {
  return generateWorkoutRoutineFlow(input);
}

const prompt = ai.definePrompt({
  name: 'generateWorkoutRoutinePrompt',
  input: {schema: GenerateWorkoutRoutineInputSchema},
  output: {schema: GenerateWorkoutRoutineOutputSchema},
  prompt: `You are a personal trainer. Generate a structured workout routine based on the user's fitness level, goals, available equipment, workout duration, and workout frequency.

User Input:
Fitness Level: {{{fitnessLevel}}}
Goals: {{{goals}}}
Available Equipment: {{{availableEquipment}}}
Workout Duration: {{{workoutDuration}}} minutes
Workout Frequency: {{{workoutFrequency}}} days per week

Output Instructions:
Provide the output as a JSON object conforming to the specified schema.
The 'workoutPlan' should be an array, where each item represents a workout day.
Each day ('DailyWorkoutSchema') must have:
- 'dayTitle': A descriptive title for the day (e.g., "Day 1: Strength Training - Upper Body"). This will be a heading.
- 'exercises': An array of exercise objects. Each exercise ('ExerciseSchema') must have:
    - 'name': The specific name of the exercise (e.g., "Bench Press", "Squats"). Make this name distinct.
    - 'details': The sets, reps, duration, or other instructions for that exercise (e.g., "3 sets of 10 reps", "30 seconds hold", "2 minutes rest").
- 'notes': (Optional) Any additional notes for the day, like warm-up, cool-down, or general advice, in Markdown format.

Ensure the routine is well-structured, easy to follow, and provides clear instructions for each exercise.
The order of exercises within each day should be logical for a workout.
Include an 'introduction' and 'conclusion' in Markdown format for the overall plan if you have general advice or summaries.
Example for one exercise: { "name": "Push-ups", "details": "3 sets of 15 reps" }
`,
});

const generateWorkoutRoutineFlow = ai.defineFlow(
  {
    name: 'generateWorkoutRoutineFlow',
    inputSchema: GenerateWorkoutRoutineInputSchema,
    outputSchema: GenerateWorkoutRoutineOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    if (!output) {
      throw new Error("Failed to generate workout routine. The AI model did not return an output.");
    }
    // Ensure workoutPlan is an array, even if empty, to prevent runtime errors.
    if (!output.workoutPlan) {
      output.workoutPlan = [];
    }
    output.workoutPlan.forEach(day => {
      if (!day.exercises) {
        day.exercises = [];
      }
    });
    return output;
  }
);

